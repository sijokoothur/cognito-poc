const AmazonCognitoIdentity = require('amazon-cognito-identity-js');

const poolData = {
    UserPoolId: process.env.USER_POOL_ID, // Your user pool id here    
    ClientId: process.env.CLIENT_ID,
};
const userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);

/**
 * Registers a new user in Amazon Cognito.
 *
 * @param {object} req - The Express request object.
 * @param {object} res - The Express response object.
 * @returns {Promise<void>} A Promise that resolves when the user registration is complete.
 * @throws {object} If an error occurs during user registration, an error object is thrown.
 */
const registerUser = async (req, res) => {
    const { username, password, name, gender, email } = req.body;

    const attributeList = [
        new AmazonCognitoIdentity.CognitoUserAttribute({ Name: "name", Value: name }),
        new AmazonCognitoIdentity.CognitoUserAttribute({ Name: "gender", Value: gender }),
        new AmazonCognitoIdentity.CognitoUserAttribute({ Name: "email", Value: email })
    ];

    try {
        const result = await new Promise((resolve, reject) => {
            userPool.signUp(username, password, attributeList, null, (err, result) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(result);
            });
        });

        const cognitoUser = result.user;
        console.log('user name is ' + cognitoUser.getUsername());
        res.send(result);
    } catch (error) {
        console.log(error);
        res.status(500).send({ error: 'Failed to register user' });
    }
};

/**
 * Verifies a user's email address in Amazon Cognito using the provided verification code.
 *
 * @param {object} req - The Express request object.
 * @param {object} res - The Express response object.
 * @throws {object} If an error occurs during email verification, an error object is thrown.
 * @returns {Promise<void>} A Promise that resolves when the email verification is successful.
 *
 */
const verifyEmail = async (req, res) => {
    const { username, verificationCode } = req.body;

    const userData = {
        Username: username,
        Pool: userPool,
    };

    const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

    try {
        const result = await new Promise((resolve, reject) => {
            cognitoUser.confirmRegistration(verificationCode, true, (err, result) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(result);
            });
        });

        console.log('Email verification successful', result);
        res.send(result);
    } catch (error) {
        console.log(error);
        res.status(500).send({ error: 'Failed to verify email' });
    }
};

/**
 * Resends the confirmation code for email or phone number verification in Amazon Cognito.
 *
 * @param {object} req - The Express request object.
 * @param {object} res - The Express response object.
 * @throws {object} If an error occurs during code resend, an error object is thrown.
 * @returns {Promise<void>} A Promise that resolves when the confirmation code is resent successfully.
 *
 */
const resendConfirmationCode = async (req, res) => {
    const { username } = req.body; // Assuming you send the username and verificationCode in the request body

    const userData = {
        Username: username,
        Pool: userPool,
    };

    const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

    try {
        const result = await new Promise((resolve, reject) => {
            cognitoUser.resendConfirmationCode((err, result) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(result);
            });
        });

        console.log('Verification code resent successfully', result);
        res.send(result);
    } catch (error) {
        console.log(error);
        res.status(500).send({ error: 'Failed ' });
    }
};

/**
 * Updates user attributes in Amazon Cognito.
 *
 * @param {object} req - The Express request object.
 * @param {object} res - The Express response object.
 * @throws {object} If an error occurs during user attribute update, an error object is thrown.
 * @returns {Promise<void>} A Promise that resolves when the user attributes are updated successfully.
 *
 */
const updateUser = async (req, res) => {
    try {
        const { name } = req.body;

        const attributeList = [
            new AmazonCognitoIdentity.CognitoUserAttribute({
                Name: "name",
                Value: name,
            })
        ];

        const userData = {
            Username: req.user.username,
            Pool: userPool
        };

        const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

        console.log(req.headers['id-token']);

        const sessionData = {
            AccessToken: new AmazonCognitoIdentity.CognitoAccessToken({ AccessToken: req.user.token }),
            IdToken: new AmazonCognitoIdentity.CognitoIdToken({ IdToken: req.headers['id-token'] }),
            RefreshToken: new AmazonCognitoIdentity.CognitoRefreshToken({ RefreshToken: req.headers['refresh-token'] }),
        };

        cognitoUser.setSignInUserSession(new AmazonCognitoIdentity.CognitoUserSession(sessionData));

        const result = await new Promise((resolve, reject) => {
            cognitoUser.updateAttributes(attributeList, (err, result) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(result);
                }
            });
        });

        console.log(result);
        res.send(result);
    } catch (error) {
        console.log(error);
        res.status(500).send({ error: 'Failed to update user attributes' });
    }
};

module.exports = {
    updateUser,
    registerUser,
    verifyEmail,
    resendConfirmationCode,
};

